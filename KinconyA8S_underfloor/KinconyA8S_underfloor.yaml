esphome:
  name: "kinconya8s_underfloor"
  friendly_name: kinconya8s-underfloor
  on_boot:
    priority: -100
    then:
      - if:
          condition: 
            binary_sensor.is_on: input1
          then:
            switch.turn_on: actuator1
      - if:
          condition: 
            binary_sensor.is_on: input2
          then:
            switch.turn_on: actuator2
      - if:
          condition: 
            binary_sensor.is_on: input3
          then:
            switch.turn_on: actuator3
      - if:
          condition: 
            binary_sensor.is_on: input4
          then:
            switch.turn_on: actuator4
      - if:
          condition: 
            binary_sensor.is_on: input5
          then:
            switch.turn_on: actuator5
      - if:
          condition: 
            binary_sensor.is_on: input6
          then:
            switch.turn_on: actuator6
      - light.turn_on:
          id: led
          brightness: 50%
          red: 0
          green: 0
          blue: 1

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
#  encryption:
#    key: "Osms004wF8Xo5BCNGdWO2cFlgV2Q8TngFerCbP0f00E="

ota:
#  password: "d4186fc9ff466f6a84c63da09fa3d524"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Kinkony Fallback Hotspot"
    password: !secret hotspot_password

captive_portal:
    
i2c:
  sda: 4
  scl: 5
  scan: true
  id: bus_a

#uncommment below if you plan to use Ethernet
#ethernet:
#  type: LAN8720
#  mdc_pin: GPIO23
#  mdio_pin: GPIO18
#  clk_mode: GPIO17_OUT
#  phy_addr: 0

pcf8574:
  - id: 'pcf8574_hub_out_1'  
    address: 0x24

  - id: 'pcf8574_hub_in_1'  
    address: 0x22

#configure all the relays

switch:
  - platform: gpio
    name: "Actuator 1"
    id: actuator1
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 7
      mode: OUTPUT
      inverted: true
  
  - platform: gpio
    name: "Actuator 2"
    id: actuator2
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 6
      mode: OUTPUT
      inverted: true
  
  - platform: gpio
    name: "Actuator 3"
    id: actuator3
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 5
      mode: OUTPUT
      inverted: true
  
  - platform: gpio
    name: "Actuator 4"
    id: actuator4
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 4
      mode: OUTPUT
      inverted: true
  
  - platform: gpio
    name: "Actuator 5"
    id: actuator5
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 3
      mode: OUTPUT
      inverted: true
  
  - platform: gpio
    name: "Actuator 6"
    id: actuator6
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 2
      mode: OUTPUT
      inverted: true
  
  - platform: gpio   
    id: pump
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 1
      mode: OUTPUT
      inverted: true
  
  - platform: gpio
    id: heater
    pin:
      pcf8574: pcf8574_hub_out_1
      number: 0
      mode: OUTPUT
      inverted: true

#configure the template switch that acts as the group for the actuators

  - platform: template
    id: actuator_group
    optimistic: yes
    lambda: |-
      if ( id(actuator1).state or id(actuator2).state or id(actuator3).state or id(actuator4).state or id(actuator5).state or id(actuator6).state) {
        return true;
      } else {
        return false;
      }
    on_turn_on:
      - script.execute: pump_heater_sequence
      - light.turn_on:
          id: led
          brightness: 50%
          red: 0
          green: 1
          blue: 0
    on_turn_off:
      - script.stop: pump_heater_sequence
      - switch.turn_off: pump
      - switch.turn_off: heater
      - light.turn_on:
          id: led
          brightness: 50%
          red: 0
          green: 0
          blue: 1

#configure all the physical inputs

binary_sensor:
  - platform: gpio
    name: "Input 1"
    id: input1
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 0
      mode: INPUT
      inverted: true
    on_press: 
      switch.turn_on: actuator1
    on_release: 
      switch.turn_off: actuator1

  - platform: gpio
    name: "Input 2"
    id: input2
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 1
      mode: INPUT
      inverted: true
    on_press: 
      switch.turn_on: actuator2
    on_release: 
      switch.turn_off: actuator2

  - platform: gpio
    name: "Input 3"
    id: input3
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 2
      mode: INPUT
      inverted: true
    on_press: 
      switch.turn_on: actuator3
    on_release: 
      switch.turn_off: actuator3

  - platform: gpio
    name: "Input 4"
    id: input4
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 3
      mode: INPUT
      inverted: true
    on_press: 
      switch.turn_on: actuator4
    on_release: 
      switch.turn_off: actuator4

  - platform: gpio
    name: "Input 5"
    id: input5
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 4
      mode: INPUT
      inverted: true
    on_press: 
      switch.turn_on: actuator5
    on_release: 
      switch.turn_off: actuator5

  - platform: gpio
    name: "Input 6"
    id: input6
    pin:
      pcf8574: pcf8574_hub_in_1
      number: 5
      mode: INPUT
      inverted: true
    on_press: 
      switch.turn_on: actuator6
    on_release: 
      switch.turn_off: actuator6

#configure the template binary sensors for the pump and heater
  - platform: template
    name: "Pump status"
    lambda: |-
      if (id(pump).state) {
        return true;
      } else {
        return false;
      }

  - platform: template
    name: "Heater status"
    lambda: |-
      if (id(heater).state) {
        return true;
      } else {
        return false;
      }

#configure the RGB LED

light:
  - platform: neopixelbus
    id: led
    type: GRB
    variant: WS2811
    pin: GPIO12
    num_leds: 1
    default_transition_length: 500ms

#configure the number variable that will be used for the timer

number:
  - platform: template
    min_value: 0
    max_value: 300
    initial_value: 240
    step: 10
    optimistic: yes
    restore_value: yes
    name: "Timer"
    id: timer

#configure the script for the pump and heater
script:
  - id: pump_heater_sequence
    mode: restart
    then:
      - delay: !lambda return (id(timer).state * 1000);
      - switch.turn_on: pump
      - switch.turn_on: heater
      - light.turn_on:
          id: led
          brightness: 50%
          red: 1
          green: 0.7
          blue: 0

